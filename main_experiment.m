% ========================================================================
% Introduction
% ========================================================================
% This code provides a simple demonstration of using adaptive
% constraints generated by morphological operations to reconstruct the
% complex-valued object
% ========================================================================
% The code is written by Danlin Xu, 2022
% The version of Matlab for this code is R2021a
% ========================================================================
%%
% =========================================================================
% Data generation
% =========================================================================

clear;clc
close all

% load experimental data
load('experiment_data_USAF.mat','exp_data');
Hologram_in = exp_data;

% physical parameters
wavelength = 632.8e-9; %m
pixel_size = 5.86e-6; %m
z = 0.0415;% recording distance m 
[m,n] = size(exp_data);

% propagation
prop = Propagator(wavelength,pixel_size,m,n,z);

% back propagation 
Hologram_in_back = ifft2(ifftshift(fftshift(fft2(sqrt(Hologram_in))).*conj(prop)));
amplitude_in = abs(Hologram_in_back);   
phase_in = angle(Hologram_in_back);
figure(1),subplot('position',[0 0 1 1]),imshow(amplitude_in,[]);

%%
% =========================================================================
% Iteration process
% =========================================================================

Iterations = 200;
sensor_plane2 = zeros(m,n);

% initialization
measured = sqrt(Hologram_in);
phase_h1 = zeros(m,n);

% structual elements
SE1 = strel('disk',1); 
SE2 = strel('square',2);

% evolutions of adaptive constraints
figure
for tt = 1:Iterations
    
    fprintf('Iteration: %d\n', tt)
    
    
    sensor_plane1 = measured.* exp(1i.*phase_h1);
    
    % backward propagation
    object_plane1 = ifft2(ifftshift(fftshift(fft2(sensor_plane1)).*conj(prop))); %% object plane  
    amplitude_o1 = abs(object_plane1); 
    phase_o1 = angle(object_plane1);
    
    % update the object plane
    o1 = 1-amplitude_o1;
    S1 = morphological_operation(o1,SE1,SE2);
    amplitude_updated = 1-o1.*S1;
    
    S2 = morphological_operation(phase_o1,SE1,SE2); 
    phase_updated = phase_o1.*S2;    
    imshow(S1,[]); 
    
    object_plane2 = amplitude_updated.*exp(1i.*phase_updated); %%update the object field
    
    if tt == Iterations
        k1 = object_plane2;
    end
    
    % foreward propagation
    sensor_plane2 = ifft2(ifftshift(fftshift(fft2(object_plane2)).*prop));
    amplitude_h1 = abs(sensor_plane2);
    phase_h1 = angle(sensor_plane2); 
  
end

%%
% =========================================================================
% Display results
% =========================================================================

% visualize the reconstructed image
recons = k1;
recon_amp = abs(recons); 
figure(2),subplot('position',[0 0 1 1]),imshow(recon_amp,[]);

% visualize adaptive constraints
figure(3),subplot('position',[0 0 1 1]),imshow(S1,[]);hold on; visboundaries(S1);


